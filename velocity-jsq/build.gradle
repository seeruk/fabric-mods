plugins {
    id "java"
    id "com.gradleup.shadow" version "8.3.3"
    id "xyz.jpenilla.run-velocity" version "2.3.1"
}

group = "dev.seeruk.plugin.velocity"
version = "1.1-SNAPSHOT"

dependencies {
    implementation libs.protobuf.java

    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    compileOnly "net.william278:papiproxybridge:1.6"

    implementation project(":common-jsq")
    implementation "dev.dejvokep:boosted-yaml:1.3.6"
    implementation "io.lettuce:lettuce-core:6.3.2.RELEASE"
}

java {
    toolchain.setLanguageVersion(JavaLanguageVersion.of(17))
}

tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin"s jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.3.0-SNAPSHOT")
    }

    shadowJar {
        archiveClassifier = ""

        relocate "dev.dejvokep.boostedyaml", "dev.seeruk.plugin.libs"
    }

    build {
        dependsOn(shadowJar)
    }
}

def templateSource = file("src/main/templates")
def templateDest = layout.buildDirectory.dir("generated/sources/templates")
def generateTemplates = tasks.register("generateTemplates", Copy) { task ->
    def props = [
            "version": project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
